--------------------------[ROUND 1]------------------------------

Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_4 (Conv2D)            (None, 96, 96, 32)        160       
_________________________________________________________________
max_pooling2d_4 (MaxPooling2 (None, 48, 48, 32)        0         
_________________________________________________________________
conv2d_5 (Conv2D)            (None, 48, 48, 64)        8256      
_________________________________________________________________
max_pooling2d_5 (MaxPooling2 (None, 24, 24, 64)        0         
_________________________________________________________________
conv2d_6 (Conv2D)            (None, 24, 24, 128)       32896     
_________________________________________________________________
max_pooling2d_6 (MaxPooling2 (None, 12, 12, 128)       0         
_________________________________________________________________
global_average_pooling2d_2 ( (None, 128)               0         
_________________________________________________________________
dense_2 (Dense)              (None, 30)                3870      
=================================================================
Total params: 45,182
Trainable params: 45,182
Non-trainable params: 0

epochs = 10
optimizer='rmsprop'

--------------------------[ROUND 2]------------------------------
epochs --> 300

--------------------------[ROUND 3]------------------------------
optimizer --> SGD

--------------------------[ROUND 4]------------------------------
epochs --> 100

--------------------------[ROUND 5]------------------------------
optimizer --> 'rmsprop'

--------------------------[ROUND 6]------------------------------
Add dropout = 0.2 for first 2 conv layers


--------------------------[ROUND 7]------------------------------

model = Sequential()
### TODO: Define your architecture.
model.add(Convolution2D(filters=32, kernel_size=2, padding='same', activation='relu', input_shape=(96, 96, 1)))
model.add(Dropout(0.2))
model.add(MaxPooling2D(pool_size=2))
model.add(Convolution2D(filters=64, kernel_size=2, padding='same', activation='relu'))
model.add(Dropout(0.2))
model.add(MaxPooling2D(pool_size=2))
# model.add(Conv2D(filters=128, kernel_size=2, kernel_regularizer=regularizers.l2(0.01), padding='same', activation='relu'))
model.add(Convolution2D(filters=128, kernel_size=2, padding='same', activation='relu'))
# model.add(BatchNormalization(axis=1))
model.add(MaxPooling2D(pool_size=2))
model.add(GlobalAveragePooling2D())
model.add(Dense(500, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(500, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(30, activation = 'softmax'))
model.summary()

--------------------------[ROUND 8]------------------------------
optimizer --> SGD

--------------------------[ROUND 9]------------------------------
dropout --> 0.4

--------------------------[ROUND 10]------------------------------

epochs = 300

--------------------------[ROUND 11]------------------------------
optimizer --> rmsprop

--------------------------[ROUND 12]------------------------------
optimizer --> adagrad

--------------------------[ROUND 13]------------------------------
optimizer --> adadelta

--------------------------[ROUND 14]------------------------------
optimizer --> adam

--------------------------[ROUND 15]------------------------------
optimizer --> adamax

--------------------------[ROUND 16]------------------------------
optimizer --> nadam
